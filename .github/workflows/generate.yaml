name: Generate Dash Docset and files for gh-pages
on:
  schedule:
    - cron: "30 5 * * 0,2,4" # 5.30 every sunday, tuesday and thursday
  workflow_dispatch:
    inputs:
      force:
        description: "Force rebuild even if latest version exists"
        required: false
        default: "false"
        type: boolean
jobs:
  find-and-check-version:
    runs-on: ubuntu-latest
    outputs:
      GH_PAGES_URL: ${{ steps.setup-variables.outputs.GH_PAGES_URL }}
      ZIP_URL: ${{ steps.find-docs-zip-and-version.outputs.ZIP_URL }}
      DOCS_VERSION: ${{ steps.find-docs-zip-and-version.outputs.DOCS_VERSION }}
      SHOULD_BUILD: ${{ steps.check-version.outputs.SHOULD_BUILD }}

    steps:
      - name: Setup variables
        id: setup-variables
        run: |
          echo "SITEVISION_API_BASE_URL=https://developer.sitevision.se/webdav/files/apidocs/" >> $GITHUB_ENV
          echo "GH_PAGES_URL=https://${GITHUB_REPOSITORY_OWNER}.github.io/${GITHUB_REPOSITORY##*/}" >> $GITHUB_ENV
          echo "GH_PAGES_URL=https://${GITHUB_REPOSITORY_OWNER}.github.io/${GITHUB_REPOSITORY##*/}" >> $GITHUB_OUTPUT
        env:
          GITHUB_REPOSITORY: ${{ github.repository }}
          GITHUB_REPOSITORY_OWNER: ${{ github.repository_owner }}

      - name: Find docs zip and version
        id: find-docs-zip-and-version
        run: |
          # Define API DOCS ENTRY URL
          SITEVISION_API_URL="${SITEVISION_API_BASE_URL}overview-summary.html"

          # Find the zip file URL
          ZIP_URL=$(curl -s "$SITEVISION_API_URL" | grep -Eoi '[^"]+\.zip' | awk -v base="$SITEVISION_API_BASE_URL" '{ print base $1 }')
          
          # Extract the version from the zip file name (e.g., apidocs_2025_01_1.zip -> 2025.01.1)
          DOCS_VERSION=$(basename "$ZIP_URL" | grep -Eo '[0-9]+_[0-9]+_[0-9]+' | sed 's/_/./g')
          echo "Parsed docs version: $DOCS_VERSION"

          # Save the version in an environment file for later steps and jobs
          echo "DOCS_VERSION=$DOCS_VERSION" >> $GITHUB_ENV
          echo "DOCS_VERSION=$DOCS_VERSION" >> $GITHUB_OUTPUT
          echo "ZIP_URL=$ZIP_URL" >> $GITHUB_OUTPUT
        env:
          SITEVISION_API_BASE_URL: ${{ env.SITEVISION_API_BASE_URL }}

      - name: Check if version is already built
        id: check-version
        run: |
          GH_PAGES_BUILD_JSON_URL="$GH_PAGES_URL/build.json"
          echo "Checking existing version from $GH_PAGES_BUILD_JSON_URL"

          EXISTING_VERSION=$(curl -s "$GH_PAGES_BUILD_JSON_URL" | jq -r '.version' 2>/dev/null || echo "none")
          echo "Existing version: $EXISTING_VERSION"
          echo "New version: $DOCS_VERSION"
          echo "Force rebuild: $FORCE_REBUILD"

          if [ "$FORCE_REBUILD" = "true" ]; then
            echo "Force rebuild enabled. Proceeding with build."
            echo "SHOULD_BUILD=true" >> $GITHUB_OUTPUT
          elif [ "$EXISTING_VERSION" = "$DOCS_VERSION" ]; then
            echo "Latest version is already built. Exiting."
            echo "SHOULD_BUILD=false" >> $GITHUB_OUTPUT
          else
            echo "New version exists. Proceeding with build."
            echo "SHOULD_BUILD=true" >> $GITHUB_OUTPUT
          fi
        env:
          DOCS_VERSION: ${{ env.DOCS_VERSION }}
          GH_PAGES_URL: ${{ env.GH_PAGES_URL }}
          FORCE_REBUILD: ${{ github.event.inputs.force }}

  build-docset:
    runs-on: ubuntu-latest
    needs: find-and-check-version
    if: needs.find-and-check-version.outputs.SHOULD_BUILD == 'true'
    outputs:
      DOCS_VERSION: ${{ steps.find-docs-zip-and-version.outputs.DOCS_VERSION }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup variables
        run: |
          echo "DOCS_VERSION=$DOCS_VERSION" >> $GITHUB_ENV
          echo "GH_PAGES_URL=$GH_PAGES_URL" >> $GITHUB_ENV
          echo "ZIP_URL=$ZIP_URL" >> $GITHUB_ENV
        env:
          DOCS_VERSION: ${{ needs.find-and-check-version.outputs.DOCS_VERSION }}
          GH_PAGES_URL: ${{ needs.find-and-check-version.outputs.GH_PAGES_URL }}
          ZIP_URL: ${{ needs.find-and-check-version.outputs.ZIP_URL }}

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.x'
      - run: go version

      - name: Cache Go build artifacts & binaries
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/bin
          key: ${{ runner.os }}-go-bin-${{ hashFiles('.github/scripts/install-go-deps.sh') }}
          restore-keys: |
            ${{ runner.os }}-go-bin-

      - name: Install go dependencies
        run: .github/scripts/install-go-deps.sh

      - name: Create directories
        run: mkdir output build

      - name: Download the zip file
        id: download-docs-zip
        run: |
          if [ -z "$ZIP_URL" ]; then
            echo "Error: invalid ZIP_URL"
            exit 1
          fi
          curl -so "build/apidocs.zip" "$ZIP_URL"
        env:
          ZIP_URL: ${{ env.ZIP_URL }}

      - name: Unzip Public API docs
        run: unzip -nq build/apidocs.zip -d build

      - name: Generate Sitevision.docset
        run: |
          javadocset Sitevision build/apidocs/
          mv Sitevision.docset build

      - name: Insert icon into Sitevision.docset
        run: cp icon.png build/Sitevision.docset

      - name: Package docset
        run: |
          tar -czf output/Sitevision.docset.tgz -C build Sitevision.docset

      - name: Write docs pages to output
        run: |
          export FEED_ENTRY_URL="${GH_PAGES_URL}/Sitevision.docset.tgz"
          export FEED_URL="${GH_PAGES_URL}/Sitevision.xml"
          export DOCSET_URL="${GH_PAGES_URL}/Sitevision.docset.tgz"
          export BUILD_DATE=$(date -Iseconds)

          gomplate --input-dir=resources --output-dir=output --exclude-processing 'assets/*'
        env:
          DOCS_VERSION: ${{ env.DOCS_VERSION }}
          GH_PAGES_URL: ${{ env.GH_PAGES_URL }}

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: docset
          path: output

  upload-docset:
    runs-on: ubuntu-latest
    needs: build-docset

    steps:
      - run: echo "Uploading files to gh-pages for version ${DOCS_VERSION}."
        env:
          DOCS_VERSION: ${{ needs.build-docset.outputs.DOCS_VERSION }}

      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: docset
          path: output

      - name: Upload to GitHub Pages
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: output
          publish_branch: gh-pages
          allow_empty_commit: true
          commit_message: "Generated docs for version ${{ needs.build-docset.outputs.DOCS_VERSION }}"
